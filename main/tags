!_TAG_FILE_FORMAT	2	/extended format; --format=1 will not append ;" to lines/
!_TAG_FILE_SORTED	1	/0=unsorted, 1=sorted, 2=foldcase/
!_TAG_PROGRAM_AUTHOR	Darren Hiebert	/dhiebert@users.sourceforge.net/
!_TAG_PROGRAM_NAME	Exuberant Ctags	//
!_TAG_PROGRAM_URL	http://ctags.sourceforge.net	/official site/
!_TAG_PROGRAM_VERSION	5.9~svn20110310	//
10	metdata.F90	/^10    format (2f7.1, e14.3, 3f10.3, f10.1, e12.3)$/;"	l	subroutine:metreadpoint	file:
100	ASSIM_STOMATA_conductance.F90	/^100   eyy(i+1) = a                                                             $/;"	l	subroutine:sortin	file:
100	GLACIER.F90	/^100  format(10(f7.3))$/;"	l	subroutine:GLACIER_TEMP	file:
100	LAI_readin.F90	/^100   print 101,lndname$/;"	l	subroutine:LAI_readin	file:
100	THERMAL.F90	/^100   format(10(f15.3))$/;"	l	subroutine:THERMAL	file:
1000	ASSIM_STOMATA_conductance.F90	/^1000  continue                                                                 $/;"	l	subroutine:sortin	file:
1000	LAI_readin.F90	/^1000  continue$/;"	l	subroutine:LAI_readin	file:
101	LAI_readin.F90	/^101   format(' error occured on file: ',a50)$/;"	l	subroutine:LAI_readin	file:
200	ASSIM_STOMATA_conductance.F90	/^200   continue                                                                 $/;"	l	subroutine:sortin	file:
2000	ASSIM_STOMATA_conductance.F90	/^2000  continue                                                                 $/;"	l	subroutine:sortin	file:
3000	ASSIM_STOMATA_conductance.F90	/^3000  continue                                                                 $/;"	l	subroutine:sortin	file:
500	ASSIM_STOMATA_conductance.F90	/^500   continue                                                                 $/;"	l	subroutine:sortin	file:
ALBEDO	ALBEDO.F90	/^MODULE ALBEDO$/;"	m
ASSIM_STOMATA_conductance	ASSIM_STOMATA_conductance.F90	/^MODULE ASSIM_STOMATA_conductance$/;"	m
CLMDRIVER	CLMDRIVER.F90	/^SUBROUTINE CLMDRIVER /;"	s
CLMMAIN	CLMMAIN.F90	/^SUBROUTINE CLMMAIN /;"	s
CaMa	Makefile	/^CaMa = $(word 1, ${DEF})$/;"	m
CaMa_DIR	Makefile	/^CaMa_DIR = ..\/CaMa$/;"	m
CaMa_LIBS	Makefile	/^CaMa_LIBS = $(CaMa_DIR)\/src\/srcs.a \\$/;"	m
CaMa_MODS	Makefile	/^CaMa_MODS = -I$(CaMa_DIR)\/mod \\$/;"	m
CanopyRad	ThreeDCanopy.F90	/^SUBROUTINE CanopyRad(/;"	s
DEF	Makefile	/^DEF  = $(shell grep -i cama_flood ..\/include\/define.h)$/;"	m
EXECUTABLE	Makefile	/^EXECUTABLE = clm.x$/;"	m
FLUSH_2D_Fluxes	MOD_2D_Fluxes.F90	/^SUBROUTINE FLUSH_2D_Fluxes$/;"	s
FRICTION_VELOCITY	FRICTION_VELOCITY.F90	/^MODULE FRICTION_VELOCITY$/;"	m
GETMET	GETMET.F90	/^   SUBROUTINE GETMET(/;"	s
GETMETFINAL	GETMET.F90	/^   SUBROUTINE GETMETFINAL$/;"	s
GETMETINI	GETMET.F90	/^   SUBROUTINE GETMETINI(/;"	s
GETMET_NC	GETMET.F90	/^   SUBROUTINE GETMET_NC(/;"	s
GLACIER_TEMP	GLACIER.F90	/^ subroutine GLACIER_TEMP /;"	s
GLACIER_WATER	GLACIER.F90	/^ subroutine GLACIER_WATER /;"	s
Init_GlovalVars	GlobalVars.F90	/^   SUBROUTINE Init_GlovalVars$/;"	s
Init_LC_Const	LC_Const.F90	/^   SUBROUTINE Init_LC_Const$/;"	s
Init_PFT_Const	PFT_Const.F90	/^   SUBROUTINE Init_PFT_Const$/;"	s
LAI_empirical	LAI_empirical.F90	/^ subroutine LAI_empirical(/;"	s
LAI_readin	LAI_readin.F90	/^SUBROUTINE LAI_readin /;"	s
LAI_readin_nc	LAI_readin_nc.F90	/^SUBROUTINE LAI_readin_nc /;"	s
LEAF_interception	LEAF_interception.F90	/^ SUBROUTINE LEAF_interception /;"	s
LEAF_interception_pcwrap	LEAF_interception.F90	/^ SUBROUTINE LEAF_interception_pcwrap /;"	s
LEAF_interception_pftwrap	LEAF_interception.F90	/^ SUBROUTINE LEAF_interception_pftwrap /;"	s
LeafTemp	LEAF_temperature.F90	/^  SUBROUTINE  LeafTemp(/;"	s
LeafTempPC	LEAF_temperature_PC.F90	/^  SUBROUTINE  LeafTempPC /;"	s
NVAR	user_specified_forcing.F90	/^   integer, parameter :: NVAR /;"	v
NVAR	user_specified_forcing.F90	/^   integer, parameter :: NVAR /;"	v	module:user_specified_forcing
OBJS	Makefile	/^OBJS =  precision.o                 \\$/;"	m
OverlapArea	ThreeDCanopy.F90	/^REAL(selected_real_kind(12)) FUNCTION OverlapArea(/;"	f
PhysicalConstants	PhysicalConstants.F90	/^MODULE PhysicalConstants$/;"	m
READ_TimeInvariants	MOD_TimeInvariants.F90	/^  SUBROUTINE READ_TimeInvariants(/;"	s
READ_TimeVariables	MOD_TimeVariables.F90	/^  SUBROUTINE READ_TimeVariables /;"	s
THERMAL	THERMAL.F90	/^ SUBROUTINE THERMAL /;"	s
ThreeDCanopy	ThreeDCanopy.F90	/^SUBROUTINE ThreeDCanopy(/;"	s
ThreeDCanopy_wrap	ThreeDCanopy.F90	/^SUBROUTINE ThreeDCanopy_wrap /;"	s
WATER	SOIL_SNOW_hydrology.F90	/^  subroutine WATER /;"	s
WRITE_TimeInvariants	MOD_TimeInvariants.F90	/^  SUBROUTINE WRITE_TimeInvariants(/;"	s
WRITE_TimeVariables	MOD_TimeVariables.F90	/^  SUBROUTINE WRITE_TimeVariables /;"	s
acc	vec2xy.F90	/^SUBROUTINE acc(/;"	s
addsec	timemanager.F90	/^   FUNCTION addsec(/;"	f	module:timemanager
adj2begin	timemanager.F90	/^   SUBROUTINE adj2begin(/;"	s	module:timemanager
adj2end	timemanager.F90	/^   SUBROUTINE adj2end(/;"	s	module:timemanager
albland	ALBEDO.F90	/^  SUBROUTINE albland /;"	s	module:ALBEDO
albocean	ALBEDO.F90	/^  SUBROUTINE albocean /;"	s	module:ALBEDO
allocate_1D_Fluxes	MOD_1D_Fluxes.F90	/^  SUBROUTINE allocate_1D_Fluxes$/;"	s
allocate_1D_Forcing	MOD_1D_Forcing.F90	/^  SUBROUTINE allocate_1D_Forcing /;"	s
allocate_1D_PCFluxes	MOD_1D_PCFluxes.F90	/^  SUBROUTINE allocate_1D_PCFluxes$/;"	s
allocate_1D_PFTFluxes	MOD_1D_PFTFluxes.F90	/^  SUBROUTINE allocate_1D_PFTFluxes$/;"	s
allocate_2D_Fluxes	MOD_2D_Fluxes.F90	/^SUBROUTINE allocate_2D_Fluxes(/;"	s
allocate_2D_Forcing	MOD_2D_Forcing.F90	/^  SUBROUTINE allocate_2D_Forcing /;"	s
allocate_PCTimeInvars	MOD_PCTimeInvars.F90	/^  SUBROUTINE allocate_PCTimeInvars$/;"	s
allocate_PCTimeVars	MOD_PCTimeVars.F90	/^   SUBROUTINE allocate_PCTimeVars /;"	s
allocate_PFTimeInvars	MOD_PFTimeInvars.F90	/^  SUBROUTINE allocate_PFTimeInvars$/;"	s
allocate_PFTimeVars	MOD_PFTimeVars.F90	/^   SUBROUTINE allocate_PFTimeVars /;"	s
allocate_TimeInvariants	MOD_TimeInvariants.F90	/^  SUBROUTINE allocate_TimeInvariants /;"	s
allocate_TimeVariables	MOD_TimeVariables.F90	/^  SUBROUTINE allocate_TimeVariables /;"	s
assignidate	timemanager.F90	/^   SUBROUTINE assignidate(/;"	s	module:timemanager
assigntstamp	timemanager.F90	/^   SUBROUTINE assigntstamp(/;"	s	module:timemanager
besame	timemanager.F90	/^   LOGICAL FUNCTION besame(/;"	f	module:timemanager
cal_z0_displa	LEAF_temperature.F90	/^  SUBROUTINE cal_z0_displa /;"	s
cal_z0_displa	LEAF_temperature_PC.F90	/^  SUBROUTINE cal_z0_displa /;"	s
calavgcos	metdata.F90	/^   SUBROUTINE calavgcos(/;"	s
calendarday_date	timemanager.F90	/^   REAL(r8) FUNCTION calendarday_date(/;"	f	module:timemanager
calendarday_stamp	timemanager.F90	/^   REAL(r8) FUNCTION calendarday_stamp(/;"	f	module:timemanager
combo	SNOW_Layers_CombineDivide.F90	/^ subroutine combo /;"	s
cpair	PhysicalConstants.F90	/^  REAL(r8), parameter :: cpair /;"	v	module:PhysicalConstants
cpice	PhysicalConstants.F90	/^  REAL(r8), parameter :: cpice /;"	v	module:PhysicalConstants
cpliq	PhysicalConstants.F90	/^  REAL(r8), parameter :: cpliq /;"	v	module:PhysicalConstants
data2d	user_specified_forcing.F90	/^   logical, parameter :: data2d /;"	v
data2d	user_specified_forcing.F90	/^   logical, parameter :: data2d /;"	v	module:user_specified_forcing
day	timemanager.F90	/^      INTEGER :: year, day,/;"	k	type:timestamp
deallocate_1D_Fluxes	MOD_1D_Fluxes.F90	/^  SUBROUTINE deallocate_1D_Fluxes$/;"	s
deallocate_1D_Forcing	MOD_1D_Forcing.F90	/^  SUBROUTINE deallocate_1D_Forcing$/;"	s
deallocate_1D_PCFluxes	MOD_1D_PCFluxes.F90	/^  SUBROUTINE deallocate_1D_PCFluxes$/;"	s
deallocate_1D_PFTFluxes	MOD_1D_PFTFluxes.F90	/^  SUBROUTINE deallocate_1D_PFTFluxes$/;"	s
deallocate_2D_Fluxes	MOD_2D_Fluxes.F90	/^SUBROUTINE deallocate_2D_Fluxes$/;"	s
deallocate_2D_Forcing	MOD_2D_Forcing.F90	/^  SUBROUTINE deallocate_2D_Forcing$/;"	s
deallocate_PCTimeInvars	MOD_PCTimeInvars.F90	/^  SUBROUTINE deallocate_PCTimeInvars$/;"	s
deallocate_PCTimeVars	MOD_PCTimeVars.F90	/^   SUBROUTINE deallocate_PCTimeVars$/;"	s
deallocate_PFTimeInvars	MOD_PFTimeInvars.F90	/^  SUBROUTINE deallocate_PFTimeInvars$/;"	s
deallocate_PFTimeVars	MOD_PFTimeVars.F90	/^   SUBROUTINE deallocate_PFTimeVars$/;"	s
deallocate_TimeInvariants	MOD_TimeInvariants.F90	/^  SUBROUTINE deallocate_TimeInvariants$/;"	s
deallocate_TimeVariables	MOD_TimeVariables.F90	/^  SUBROUTINE deallocate_TimeVariables$/;"	s
denh2o	PhysicalConstants.F90	/^  REAL(r8), parameter :: denh2o /;"	v	module:PhysicalConstants
denice	PhysicalConstants.F90	/^  REAL(r8), parameter :: denice /;"	v	module:PhysicalConstants
dewfraction	LEAF_temperature.F90	/^  SUBROUTINE dewfraction /;"	s
dewfraction	LEAF_temperature_PC.F90	/^  SUBROUTINE dewfraction /;"	s
dim2d	user_specified_forcing.F90	/^   logical, parameter :: dim2d /;"	v
dim2d	user_specified_forcing.F90	/^   logical, parameter :: dim2d /;"	v	module:user_specified_forcing
dtime	user_specified_forcing.F90	/^   integer, parameter :: dtime(/;"	v
dtime	user_specified_forcing.F90	/^   integer, parameter :: dtime(/;"	v	module:user_specified_forcing
endmo	user_specified_forcing.F90	/^   integer, parameter :: endmo /;"	v
endmo	user_specified_forcing.F90	/^   integer, parameter :: endmo /;"	v	module:user_specified_forcing
endyr	user_specified_forcing.F90	/^   integer, parameter :: endyr /;"	v
endyr	user_specified_forcing.F90	/^   integer, parameter :: endyr /;"	v	module:user_specified_forcing
eroot	eroot.F90	/^ subroutine eroot /;"	s
fkint	LEAF_temperature.F90	/^  REAL(r8) FUNCTION fkint(/;"	f
fkint	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION fkint(/;"	f
flxwrite	flxwrite.F90	/^ SUBROUTINE flxwrite /;"	s
fprefix	user_specified_forcing.F90	/^   character(len=256), parameter :: fprefix(/;"	v
fprefix	user_specified_forcing.F90	/^   character(len=256), parameter :: fprefix(/;"	v	module:user_specified_forcing
frd	LEAF_temperature.F90	/^  REAL(r8) FUNCTION frd(/;"	f
frd	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION frd(/;"	f
fuint	LEAF_temperature.F90	/^  REAL(r8) FUNCTION fuint(/;"	f
fuint	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION fuint(/;"	f
getfilename	user_specified_forcing.F90	/^   FUNCTION getfilename(/;"	f
grav	PhysicalConstants.F90	/^  REAL(r8), parameter :: grav /;"	v	module:PhysicalConstants
groundfluxes	groundfluxes.F90	/^ subroutine groundfluxes /;"	s
groundfluxes_glacier	GLACIER.F90	/^ subroutine groundfluxes_glacier /;"	s
groundtem	groundtem.F90	/^ subroutine groundtem /;"	s
groundtem_glacier	GLACIER.F90	/^ subroutine groundtem_glacier /;"	s
groupby	user_specified_forcing.F90	/^   character(len=256), parameter :: groupby /;"	v
groupby	user_specified_forcing.F90	/^   character(len=256), parameter :: groupby /;"	v	module:user_specified_forcing
hCapacity	SOIL_thermal_parameters.F90	/^  subroutine hCapacity /;"	s
hConductivity	SOIL_thermal_parameters.F90	/^  subroutine hConductivity /;"	s
hConductivity_lake	LAKE.F90	/^  subroutine hConductivity_lake(/;"	s
hfus	PhysicalConstants.F90	/^  REAL(r8), parameter :: hfus /;"	v	module:PhysicalConstants
hightdim	user_specified_forcing.F90	/^   logical, parameter :: hightdim /;"	v
hightdim	user_specified_forcing.F90	/^   logical, parameter :: hightdim /;"	v	module:user_specified_forcing
hsub	PhysicalConstants.F90	/^  REAL(r8), parameter :: hsub /;"	v	module:PhysicalConstants
hvap	PhysicalConstants.F90	/^  REAL(r8), parameter :: hvap /;"	v	module:PhysicalConstants
i8	precision.F90	/^  INTEGER, parameter :: i8 /;"	v
initimetype	timemanager.F90	/^   SUBROUTINE initimetype(/;"	s	module:timemanager
isendofday	timemanager.F90	/^   LOGICAL FUNCTION isendofday(/;"	f	module:timemanager
isendofmonth	timemanager.F90	/^   LOGICAL FUNCTION isendofmonth(/;"	f	module:timemanager
isendofyear	timemanager.F90	/^   LOGICAL FUNCTION isendofyear(/;"	f	module:timemanager
isgreenwich	timemanager.F90	/^   LOGICAL, SAVE :: isgreenwich$/;"	v	module:timemanager
isleapyear	timemanager.F90	/^   LOGICAL FUNCTION isleapyear(/;"	f	module:timemanager
isnull	timemanager.F90	/^   LOGICAL FUNCTION isnull(/;"	f	module:timemanager
julian2monthday	timemanager.F90	/^   SUBROUTINE julian2monthday(/;"	s	module:timemanager
kdif	LEAF_temperature.F90	/^  REAL(r8) FUNCTION kdif(/;"	f
kdif	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION kdif(/;"	f
kfindroots	LEAF_temperature.F90	/^  RECURSIVE SUBROUTINE kfindroots(/;"	s
kfindroots	LEAF_temperature_PC.F90	/^  RECURSIVE SUBROUTINE kfindroots(/;"	s
kintegral	LEAF_temperature.F90	/^  REAL(r8) FUNCTION kintegral(/;"	f
kintegral	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION kintegral(/;"	f
kintmoninobuk	FRICTION_VELOCITY.F90	/^ real(r8) function kintmoninobuk(/;"	f	module:FRICTION_VELOCITY
kmoninobuk	FRICTION_VELOCITY.F90	/^ real(r8) function kmoninobuk(/;"	f	module:FRICTION_VELOCITY
kprofile	LEAF_temperature.F90	/^  REAL(r8) FUNCTION kprofile(/;"	f
kprofile	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION kprofile(/;"	f
laketem	LAKE.F90	/^  subroutine laketem /;"	s
latname	user_specified_forcing.F90	/^   character(len=256), parameter :: latname /;"	v
latname	user_specified_forcing.F90	/^   character(len=256), parameter :: latname /;"	v	module:user_specified_forcing
latrev	user_specified_forcing.F90	/^   logical, parameter :: latrev /;"	v
latrev	user_specified_forcing.F90	/^   logical, parameter :: latrev /;"	v	module:user_specified_forcing
leapyear	user_specified_forcing.F90	/^   logical, parameter :: leapyear /;"	v
leapyear	user_specified_forcing.F90	/^   logical, parameter :: leapyear /;"	v	module:user_specified_forcing
lessequal	timemanager.F90	/^   LOGICAL FUNCTION lessequal(/;"	f	module:timemanager
lessthan	timemanager.F90	/^   LOGICAL FUNCTION lessthan(/;"	f	module:timemanager
localtime2gmt	timemanager.F90	/^   SUBROUTINE localtime2gmt(/;"	s	module:timemanager
lonadj	user_specified_forcing.F90	/^   logical, parameter :: lonadj /;"	v
lonadj	user_specified_forcing.F90	/^   logical, parameter :: lonadj /;"	v	module:user_specified_forcing
lonname	user_specified_forcing.F90	/^   character(len=256), parameter :: lonname /;"	v
lonname	user_specified_forcing.F90	/^   character(len=256), parameter :: lonname /;"	v	module:user_specified_forcing
lpwrite	lpwrite.F90	/^SUBROUTINE lpwrite(/;"	s
mGauss	ThreeDCanopy.F90	/^SUBROUTINE mGauss(/;"	s
meltf	meltf.F90	/^ subroutine meltf /;"	s
metfinal	metdata.F90	/^   SUBROUTINE metfinal$/;"	s
metinit	metdata.F90	/^   SUBROUTINE metinit(/;"	s
metpreprocess	user_specified_forcing.F90	/^   SUBROUTINE metpreprocess(/;"	s
metreadLBUB	metdata.F90	/^   SUBROUTINE metreadLBUB(/;"	s
metreadpoint	metdata.F90	/^   SUBROUTINE metreadpoint(/;"	s
moninobuk	FRICTION_VELOCITY.F90	/^ subroutine moninobuk(/;"	s	module:FRICTION_VELOCITY
moninobukini	FRICTION_VELOCITY.F90	/^ subroutine moninobukini(/;"	s	module:FRICTION_VELOCITY
moninobukm	FRICTION_VELOCITY.F90	/^ subroutine moninobukm(/;"	s	module:FRICTION_VELOCITY
monthday2julian	timemanager.F90	/^   SUBROUTINE monthday2julian(/;"	s	module:timemanager
nccheck	ncio.F90	/^   SUBROUTINE nccheck(/;"	s
netsolar	netsolar.F90	/^ SUBROUTINE netsolar /;"	s
newsnow	newsnow.F90	/^ subroutine newsnow /;"	s
newsnow_lake	LAKE.F90	/^  subroutine newsnow_lake /;"	s
nlands	user_specified_forcing.F90	/^   integer, parameter :: nlands /;"	v
nlands	user_specified_forcing.F90	/^   integer, parameter :: nlands /;"	v	module:user_specified_forcing
nlats	user_specified_forcing.F90	/^   integer, parameter :: nlats /;"	v
nlats	user_specified_forcing.F90	/^   integer, parameter :: nlats /;"	v	module:user_specified_forcing
nlons	user_specified_forcing.F90	/^   integer, parameter :: nlons /;"	v
nlons	user_specified_forcing.F90	/^   integer, parameter :: nlons /;"	v	module:user_specified_forcing
offset	user_specified_forcing.F90	/^   integer, parameter :: offset(/;"	v
offset	user_specified_forcing.F90	/^   integer, parameter :: offset(/;"	v	module:user_specified_forcing
openmetfile	metdata.F90	/^   SUBROUTINE openmetfile(/;"	s
orb_coszen	orb_coszen.F90	/^ function orb_coszen(/;"	f
phi	ThreeDCanopy.F90	/^SUBROUTINE phi(/;"	s
psi	FRICTION_VELOCITY.F90	/^ real(r8) function psi(/;"	f	module:FRICTION_VELOCITY
qsadv	qsadv.F90	/^  SUBROUTINE qsadv(/;"	s
r16	precision.F90	/^  INTEGER, parameter :: r16 /;"	v
r4	precision.F90	/^  INTEGER, parameter :: r4 /;"	v
r8	precision.F90	/^  INTEGER, parameter :: r8 /;"	v
rain_snow_temp	rain_snow_temp.F90	/^ SUBROUTINE rain_snow_temp /;"	s
rd_forcing	rd_forcing.F90	/^SUBROUTINE rd_forcing(/;"	s
readvar	metdata.F90	/^   SUBROUTINE readvar(/;"	s
rgas	PhysicalConstants.F90	/^  REAL(r8), parameter :: rgas /;"	v	module:PhysicalConstants
roughness_lake	LAKE.F90	/^  subroutine roughness_lake /;"	s
roverg	PhysicalConstants.F90	/^  REAL(r8), parameter :: roverg /;"	v	module:PhysicalConstants
rwat	PhysicalConstants.F90	/^  REAL(r8), parameter :: rwat /;"	v	module:PhysicalConstants
sanity	metdata.F90	/^   SUBROUTINE sanity(/;"	s
seafluxes	SIMPLE_OCEAN.F90	/^ subroutine seafluxes /;"	s
sec	timemanager.F90	/^      INTEGER :: year, day, sec$/;"	k	type:timestamp
setstampLB	metdata.F90	/^   SUBROUTINE setstampLB(/;"	s
setstampUB	metdata.F90	/^   SUBROUTINE setstampUB(/;"	s
snowage	snowage.F90	/^ subroutine snowage /;"	s
snowcompaction	SNOW_Layers_CombineDivide.F90	/^ subroutine snowcompaction /;"	s
snowfraction	snowfraction.F90	/^subroutine snowfraction /;"	s
snowfraction_pcwrap	snowfraction.F90	/^subroutine snowfraction_pcwrap /;"	s
snowfraction_pftwrap	snowfraction.F90	/^subroutine snowfraction_pftwrap /;"	s
snowlayerscombine	SNOW_Layers_CombineDivide.F90	/^ subroutine snowlayerscombine /;"	s
snowlayersdivide	SNOW_Layers_CombineDivide.F90	/^ subroutine snowlayersdivide /;"	s
snowwater	SOIL_SNOW_hydrology.F90	/^  subroutine snowwater /;"	s
snowwater_lake	LAKE.F90	/^  subroutine snowwater_lake /;"	s
socean	SIMPLE_OCEAN.F90	/^ subroutine socean /;"	s
soilwater	SOIL_SNOW_hydrology.F90	/^  subroutine soilwater(/;"	s
sortin	ASSIM_STOMATA_conductance.F90	/^  subroutine sortin(/;"	s	module:ASSIM_STOMATA_conductance
srftsb	SIMPLE_OCEAN.F90	/^ subroutine srftsb(/;"	s
startmo	user_specified_forcing.F90	/^   integer, parameter :: startmo /;"	v
startmo	user_specified_forcing.F90	/^   integer, parameter :: startmo /;"	v	module:user_specified_forcing
startyr	user_specified_forcing.F90	/^   integer, parameter :: startyr /;"	v
startyr	user_specified_forcing.F90	/^   integer, parameter :: startyr /;"	v	module:user_specified_forcing
stefnc	PhysicalConstants.F90	/^  REAL(r8), parameter :: stefnc /;"	v	module:PhysicalConstants
stomata	ASSIM_STOMATA_conductance.F90	/^  subroutine stomata /;"	s	module:ASSIM_STOMATA_conductance
subsurfacerunoff	SOIL_SNOW_hydrology.F90	/^  subroutine subsurfacerunoff(/;"	s
subtstamp	timemanager.F90	/^   FUNCTION subtstamp(/;"	f	module:timemanager
surfacerunoff	SOIL_SNOW_hydrology.F90	/^  subroutine surfacerunoff /;"	s
tee	ThreeDCanopy.F90	/^REAL(selected_real_kind(12)) FUNCTION tee(/;"	f
tfrz	PhysicalConstants.F90	/^  REAL(r8), parameter :: tfrz /;"	v	module:PhysicalConstants
ticktime	timemanager.F90	/^   SUBROUTINE ticktime(/;"	s	module:timemanager
timemanager	timemanager.F90	/^MODULE timemanager$/;"	m
timestamp	timemanager.F90	/^   TYPE :: timestamp$/;"	t	module:timemanager
tintalgo	user_specified_forcing.F90	/^   character(len=256), parameter :: tintalgo(/;"	v
tkair	PhysicalConstants.F90	/^  REAL(r8), parameter :: tkair /;"	v	module:PhysicalConstants
tkice	PhysicalConstants.F90	/^  REAL(r8), parameter :: tkice /;"	v	module:PhysicalConstants
tkwat	PhysicalConstants.F90	/^  REAL(r8), parameter :: tkwat /;"	v	module:PhysicalConstants
tridia	tridia.F90	/^      SUBROUTINE tridia /;"	s
twostream	ALBEDO.F90	/^  SUBROUTINE twostream /;"	s	module:ALBEDO
twostream_mod	ALBEDO.F90	/^  SUBROUTINE twostream_mod /;"	s	module:ALBEDO
twostream_wrap	ALBEDO.F90	/^  SUBROUTINE twostream_wrap /;"	s	module:ALBEDO
udif	LEAF_temperature.F90	/^  REAL(r8) FUNCTION udif(/;"	f
udif	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION udif(/;"	f
ueffect	LEAF_temperature.F90	/^  REAL(r8) FUNCTION ueffect(/;"	f
ueffect	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION ueffect(/;"	f
ufindroots	LEAF_temperature.F90	/^  RECURSIVE SUBROUTINE ufindroots(/;"	s
ufindroots	LEAF_temperature_PC.F90	/^  RECURSIVE SUBROUTINE ufindroots(/;"	s
uintegral	LEAF_temperature.F90	/^  REAL(r8) FUNCTION uintegral(/;"	f
uintegral	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION uintegral(/;"	f
umoninobuk	FRICTION_VELOCITY.F90	/^ real(r8) function umoninobuk(/;"	f	module:FRICTION_VELOCITY
uprofile	LEAF_temperature.F90	/^  REAL(r8) FUNCTION uprofile(/;"	f
uprofile	LEAF_temperature_PC.F90	/^  REAL(r8) FUNCTION uprofile(/;"	f
user_specified_forcing	user_specified_forcing.F90	/^MODULE user_specified_forcing$/;"	m
vec2xy	vec2xy.F90	/^SUBROUTINE vec2xy /;"	s
vname	user_specified_forcing.F90	/^   character(len=256), parameter :: vname(/;"	v
vonkar	PhysicalConstants.F90	/^  REAL(r8), parameter :: vonkar /;"	v	module:PhysicalConstants
wetbulb	wetbulb.F90	/^ subroutine wetbulb(/;"	s
year	timemanager.F90	/^      INTEGER :: year,/;"	k	type:timestamp
